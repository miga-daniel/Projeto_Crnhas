# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ptjzSkcmQIGZvNOyHM3sp3ydw48hJ_yB
"""

!pip install hydrobr
import pandas as pd
import hydrobr as hb

class DailySerie(pd.DataFrame):
  """
  Serie de alturas pluviométricas diárias de uma estação.
  """

  def get_waterYear(self):
    ...

  def get_monthlyAvarege(self):

    """ calcula a média de cada mês de cada ano e filtra pelos valores calculados
    a partir de meses sem falhas (objetivando não influenciar na média final)"""

    serie_completa = self.resample('M').mean()
    meses_completos = self.resample('M').count()
    index_meses_completos = meses_completos[meses_completos[self.columns[0]]==self.resample('M').size()].index
    serie_filtrada = serie_completa.loc[index_meses_completos]

    #calcula a média mensal de toda a série
    media_mensal = serie_filtrada.groupby([serie_filtrada.index.month]).mean()

    return media_mensal.plot(kind='bar',figsize = (15,5))

  def get_anualMax(self):
    result = self.resample('Y').max()
    return result.plot(kind = 'bar', figsize = (15,5))

  def get_monthlyMax(self):
    result = self.resample('M').max()
    return result.plot( figsize = (15,5))

  def get_missingValues(self):

    """
    Fornece um dataframe com 12 colunas representando os meses de janeiro a
    dezembro e linhas representando cada ano da série e para cada mês calcula o
    número de falhas naquele mês/ano.
    """
    ...

class anualSerie(pd.DataFrame):
  """
  Serie de máximos anuais de alturas pluviométricas diárias de uma estação.
  """

  def get_frequency(self, method):
    """
    Calcula os parametros das principais distribuições probabilisticas pelos
    metodos dos momentos ordinários (MOM), momentos-L (MML) e Momentos de Máxima
    verossimilhança (MMV).
    """
    ...

  def get_series(self, timestamp):
    """
    cria uma nova série contendo as alturas de chuva totais para a duração
    definida pelo usuário. Deve-se selecionar durações inteiras e superiores a
    1 dia.
    """
    ...

  def homogeneity(self, confidenceLevel):
    """
    Calcula o teste de hipótese por Mann e Whitney (1947) deve retornar o p-value,
    resultado do teste (rejeita-se ou não rejeita-se a hipótese nula) e
     o valor da estatística do teste.
    """
    ...

  def randomness(self, confidenceLevel):
    """
    Calcula o teste de hipótese pelo método em NERC (1975).
    deve retornar o p-value, resultado do teste (rejeita-se ou não rejeita-se a
    hipótese nula) e o valor da estatística do teste.
    """
    ...

  def independecy(self, confidenceLevel):
    """
    Calcula o teste de hipótese de independência por Wald e Wolfwitz (1943). de-
    ve retornar o p-value, resultado do teste (rejeita-se ou não rejeita-se a
    hipótese nula) e o valor da estatística do teste.
    """
    ...
  def stationarity(self, confidenceLevel):
    """
    Calcula o teste de hipótese de estacionariedade (Spearman) descrito por
    NERC (1975). Deve retornar o p-value, resultado do teste (rejeita-se ou não
    rejeita-se a hipótese nula) e o valor da estatística do teste.
    """
    ...

  def qui_quadrado(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência qui-quadrado para um determinado nível de significancia.
    """
    ...

  def kolmogorov_smirnov(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de kolmogorov_smirnov para um determinado nível de significancia.
    """
    ...

  def anderson_darling(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de anderson_darling para um determinado nível de significancia.
    """
    ...

  def filliben(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de filliben para um determinado nível de significancia.
    """
    ...

  def Grubbs_back(self):
    """
    Calcula o teste para detecção de outliers de Grubbs e back (1950, 1969, 1979).
    """
    ...

